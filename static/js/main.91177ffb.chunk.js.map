{"version":3,"sources":["Containers/Codebook.jsx","Containers/Questions.jsx","Containers/Surveys.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Codebook","props","toggle","tab","state","activeTab","setState","this","Card","CardHeader","CardText","Nav","tabs","justified","NavItem","NavLink","className","classnames","active","onClick","TabContent","TabPane","tabId","Row","Col","sm","Component","Questions","docArray","instrRead","qualCheck","Button","toolOn","onRating","qCount","text","ButtonGroup","value","onMouseDown","e","preventDefault","qualityCheck","displayInstructions","ref","mainRef","runTask","TLXscale","id","class","Surveys","tlxComplete","tlxWeights","elabComplete","Container","Form","Table","striped","style","width","tlxScales","runSurveys","Modal","setAppElement","App","ratingsValues","length","questionsComplete","console","log","workerID","consentSigned","surveysComplete","tlxResults","elabResults","isOpen","onRequestClose","signConsent","contentLabel","shouldCloseOnOverlayClick","toggleModal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91177ffb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Card, CardHeader, CardText, Row, Col } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport './containers.css';\r\n\r\nclass Codebook extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeTab: 'rel',\r\n    };\r\n  }\r\n\r\n  toggle = tab => {\r\n    if(this.state.activeTab !== tab) this.setState({ activeTab: tab });\r\n  }\r\n\r\n  render() {\r\n    const { activeTab } = this.state;\r\n\r\n    return (\r\n      <Card>\r\n        <CardHeader>Codebook</CardHeader>\r\n          <CardText>Prioritize answers that focus on getting to sleep. Answers that focus on planes should be considered most relevant, but answers that cover similar situations may also be considered.</CardText>\r\n          <Nav tabs justified>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({ active: activeTab === 'rel' })}\r\n                onClick={() => { this.toggle('rel'); }}\r\n              >\r\n                Relevant\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({ active: activeTab === 'slightly' })}\r\n                onClick={() => { this.toggle('slightly'); }}\r\n              >\r\n                Slightly Relevant\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({ active: activeTab === 'not' })}\r\n                onClick={() => { this.toggle('not'); }}\r\n              >\r\n                Not Relevant\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <TabContent activeTab={activeTab}>\r\n            <TabPane tabId=\"rel\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  <p>Mark answers that fully answer the question as relevant.</p>\r\n                  <h6>Example:</h6>\r\n                  <p>\"I was unable to nap on planes as well, now I can't stay awake\"</p>\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n            <TabPane tabId=\"slightly\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  <p>Mark answers that partially answer the question as slightly relevant.</p>\r\n                  <h6>Example:</h6>\r\n                  <p>Some trains are cold, so a warm thin blanket will be much more comfortable\"</p>\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n            <TabPane tabId=\"not\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  <p>Mark answers that do not answer the question as not relevant.</p>\r\n                  <h6>Example:</h6>\r\n                  <p>\"\"</p>\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n          </TabContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Codebook;\r\n\r\n// import React, { useState } from 'react';\r\n// import { TabContent, TabPane, Nav, NavItem, NavLink, Card, Button, CardTitle, CardText, Row, Col } from 'reactstrap';\r\n// import classnames from 'classnames';\r\n//\r\n// const Example = (props) => {\r\n//   const [activeTab, setActiveTab] = useState('1');\r\n//\r\n//   const toggle = tab => {\r\n//     if(activeTab !== tab) setActiveTab(tab);\r\n//   }\r\n//\r\n//   return (\r\n//     <div>\r\n//       <Nav tabs>\r\n//         <NavItem>\r\n//           <NavLink\r\n//             className={classnames({ active: activeTab === '1' })}\r\n//             onClick={() => { toggle('1'); }}\r\n//           >\r\n//             Tab1\r\n//           </NavLink>\r\n//         </NavItem>\r\n//         <NavItem>\r\n//           <NavLink\r\n//             className={classnames({ active: activeTab === '2' })}\r\n//             onClick={() => { toggle('2'); }}\r\n//           >\r\n//             More Tabs\r\n//           </NavLink>\r\n//         </NavItem>\r\n//       </Nav>\r\n//       <TabContent activeTab={activeTab}>\r\n//         <TabPane tabId=\"1\">\r\n//           <Row>\r\n//             <Col sm=\"12\">\r\n//               <h4>Tab 1 Contents</h4>\r\n//             </Col>\r\n//           </Row>\r\n//         </TabPane>\r\n//         <TabPane tabId=\"2\">\r\n//           <Row>\r\n//             <Col sm=\"6\">\r\n//               <Card body>\r\n//                 <CardTitle>Special Title Treatment</CardTitle>\r\n//                 <CardText>With supporting text below as a natural lead-in to additional content.</CardText>\r\n//                 <Button>Go somewhere</Button>\r\n//               </Card>\r\n//             </Col>\r\n//             <Col sm=\"6\">\r\n//               <Card body>\r\n//                 <CardTitle>Special Title Treatment</CardTitle>\r\n//                 <CardText>With supporting text below as a natural lead-in to additional content.</CardText>\r\n//                 <Button>Go somewhere</Button>\r\n//               </Card>\r\n//             </Col>\r\n//           </Row>\r\n//         </TabPane>\r\n//       </TabContent>\r\n//     </div>\r\n//   );\r\n// }\r\n//\r\n// export default Example;\r\n","import React, { Component } from 'react';\r\nimport { Button, ButtonGroup } from 'reactstrap';\r\nimport './containers.css';\r\n\r\n\r\n\r\nclass Questions extends Component {\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let docs = [\r\n      {'text':'I\\'ve known some friends of mine to take a Gravol (motion sickness & relaxant pill also known as Dramamine or Dimenhydrinate) and they can fall asleep quite easily on the plane.  This doesn\\'t work for me but I\\'ve known it to work for others and felt it was worth mentioning.', 'value':''},\r\n      {'text':'doc 2', 'value':''},\r\n      {'text':'doc 3', 'value':''},\r\n      {'text':'doc 4', 'value':''},\r\n      {'text':'doc 5', 'value':''},\r\n      {'text':'doc 6', 'value':''},\r\n      {'text':'doc 7', 'value':''},\r\n      {'text':'doc 8', 'value':''},\r\n      {'text':'doc 9', 'value':''},\r\n      {'text':'doc 10', 'value':''},\r\n    ];\r\n\r\n    this.state = {\r\n      docArray: docs,\r\n      instrRead: true,\r\n      qualCheck: true,\r\n      // instrRead: false,\r\n      // qualCheck: false,\r\n    };\r\n  }\r\n\r\n  displayInstructions() {\r\n    return(\r\n      <div>\r\n        <p>\r\n          Instruction Text Here\r\n        </p>\r\n        <Button onClick={() => this.setState({instrRead:true})}>Accept</Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  qualityCheck() {\r\n    return(\r\n      <div>\r\n        <p>Quality Check</p>\r\n        <Button onClick={() => this.setState({qualCheck:true})}>Accept</Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  runTask() {\r\n    const { instrRead, qualCheck, docArray } = this.state;\r\n    const { toolOn, onRating, qCount } = this.props;\r\n\r\n    //Instructions\r\n    if (!instrRead) {\r\n      return this.displayInstructions();\r\n    }\r\n\r\n    //Codebook reading test\r\n    if (toolOn === true && !qualCheck) {\r\n      return this.qualityCheck();\r\n    }\r\n\r\n    //questions\r\n    if (qCount < 10) {\r\n      return(\r\n        <div>\r\n          <h4>What is the most comfortable way to sleep on a plane?</h4>\r\n          <h6>Instructions: Rate the relevance of the answer below:</h6>\r\n          <p> {docArray[qCount].text} </p>\r\n          <ButtonGroup>\r\n            <Button\r\n              value=\"10\"\r\n              onClick={() => { onRating(10); }}\r\n              onMouseDown={e => e.preventDefault()}\r\n            >\r\n              Relevant\r\n            </Button>\r\n            <Button\r\n              value=\"5\"\r\n              onClick={() => { onRating(5); }}\r\n              onMouseDown={e => e.preventDefault()}\r\n            >\r\n              Slightly Relevant\r\n            </Button>\r\n            <Button\r\n              value=\"0\"\r\n              onClick={() => { onRating(0); }}\r\n              onMouseDown={e => e.preventDefault()}\r\n            >\r\n              Not Relevant\r\n            </Button>\r\n          </ButtonGroup>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <p>Questions Complete</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"q-container\" ref={this.mainRef}>\r\n        { this.runTask() }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Questions;\r\n","import React, { Component } from 'react';\r\nimport { Form, Table, Container, Row, Col } from 'reactstrap';\r\nimport './containers.css';\r\n\r\nclass Surveys extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      tlxComplete: false,\r\n      tlxWeights: false,\r\n      elabComplete: false,\r\n    };\r\n  }\r\n\r\n  tlxScales() {\r\n    return(\r\n      <Container className=\"tlx-div\"><Form>\r\n        <Row>\r\n          <Col>\r\n            <h4>Instructions:</h4>\r\n            <p>Evaluate your experience during the relevancy rating task you just completed by clicking at the point that matches your experience for each scale. Consider each scale indivdually. Please read the descriptions below carefully before rating.</p>\r\n            <Table striped>\r\n              <thead>\r\n                <tr>\r\n                  <th style={{width: 10+'%'}}>Title</th>\r\n                  <th style={{width: 30+'%'}}>Description</th>\r\n                  <th>Scale</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>Mental Demand</td>\r\n                  <td>How much mental and perceptual activity was required (e.g. thinking, deciding, calculating, remembering, looking, searching, etc.)? Was the task easy or demanding, simple or complex, exacting or forgiving?</td>\r\n                  <td><TLXscale id=\"mental-demand\" /></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Physical Demand</td>\r\n                  <td>How much physical activity was required (e.g. pushing, pulling, turning, controlling, activating, etc.)? Was the task easy or demanding, slow or brisk, slack or strenuous, restful or laborious?</td>\r\n                  <td><TLXscale id=\"physical-demand\" /></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Temporal Demand</td>\r\n                  <td>How much time pressure did you feel due to the rate or pace at which the tasks or task elements occurred? Was the pace slow and leisurely or rapid and frantic?</td>\r\n                  <td><TLXscale id=\"temporal-demand\" /></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Performance</td>\r\n                  <td>How successful do you think you were in accomplishing the goals of the task set by the experimenter? How satisfied were you with your performance in accomplishing these goals?</td>\r\n                  <td><TLXscale id=\"performance\" /></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Effort</td>\r\n                  <td>How hard did you have to work (mentally and physically) to accomplish your level of performance?</td>\r\n                  <td><TLXscale id=\"effort\" /></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Frustration</td>\r\n                  <td>How insecure, discouraged, irritated, stressed, and annoyed versus secure, gratified, content, relaxed and complacent did you feel during the task?</td>\r\n                  <td><TLXscale id=\"frustration\" /></td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n      </Form></Container>\r\n    );\r\n  }\r\n\r\n  runSurveys() {\r\n    const { tlxComplete } = this.state;\r\n\r\n    if (!tlxComplete) {\r\n      return this.tlxScales();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"surveys-body\">\r\n        {this.runSurveys()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction TLXscale(props) {\r\n  return (\r\n    <div className=\"tlx-scale\">\r\n      <p>{props.id==='performance' ? 'Good' : 'Low'}</p>\r\n      <ul class='likert'>\r\n        {}\r\n      </ul>\r\n      <p>{props.id==='performance' ? 'Bad' : 'High'}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Surveys;\r\n","import React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport './App.css';\nimport Codebook from './Containers/Codebook';\nimport Questions from './Containers/Questions';\nimport Surveys from './Containers/Surveys';\n\nModal.setAppElement('#root');\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      workerID: 0,\n      toolOn: true, //True if in codebook on condition, False if in control\n      consentSigned: true, //consentSigned: false,\n      questionsComplete: true, //questionsComplete: false,    \n      surveysComplete: false,\n      ratingsValues: [],\n      qCount: 0,\n      tlxResults: {},\n      elabResults:{},\n    };\n  }\n\n  componentDidMount() {\n    //this.runExperiment();\n  }\n\n  runExperiment() {\n    //Show consent in popup\n\n    //Calc condition\n\n    //render condition and wait until all questions rated\n\n    //open surveys in popup and wait until surveys completed\n\n    //calc complete code and post data to sheets\n    //data:\n    //workerID\n    //condition\n    //ratingsArray\n    //TLX results\n    //SUS results\n\n    //give code to user\n  }\n\n  onRating = value => {\n    const { qCount, ratingsValues } = this.state;\n    ratingsValues[qCount] = value;\n\n    this.setState({\n      ratingsValues: ratingsValues,\n      qCount: qCount + 1,\n    });\n\n    if (ratingsValues.length === 10) {\n      this.setState({questionsComplete: true}, () => {\n        console.log(this.state.ratingsValues);\n      });\n    }\n  }\n\n  signConsent() {\n    this.setState({\n      consentSigned: true\n    });\n  }\n\n  toggleModal() {\n    console.log(\"surveys closed\");\n  }\n\n  render() {\n    const { consentSigned, questionsComplete, surveysComplete } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Modal\n          isOpen={!consentSigned}\n          onRequestClose={this.signConsent}\n          contentLabel=\"Consent Form\"\n          shouldCloseOnOverlayClick={false}\n        >\n          <div>\n          <p>You are being asked to complete a study for research purposes. The study is testing how data collection is affected by the use of additional tooling to assist workers. Completing this study is voluntary and you can stop at any time by closing this window.</p>\n          <p>You must be 18 years of age or older to participate in this study.</p>\n          <p>There are minimal risks associated with your participation in this study. You will receive $2 for completing this study. In order to receive full compensation for completing the study, you must complete all parts of the study and pass all attention checks, then enter the provided random number code into the MTurk HIT window.</p>\n          <p>Please note that because you are participating in this research via MTurk, your participation will be listed on your MTurk profile. However, MTurk will not have access to your responses on the survey. Further, while we will have access to your MTurk ID, we will only use this information to pay you and then your ID will be deleted from our records and will no longer be associated with your responses.</p>\n          <p>If you have any questions about the study itself, how it is implemented, or study compensation, please contact J Christensen at jtchrist@ncsu.edu or B Watson at bwatson@ncsu.edu . Please reference study number 16906 when contacting anyone about this project.</p>\n          <p>If you have questions about your rights as a participant or are concerned with your treatment throughout the research process, please contact the NC State University IRB Director at IRB-Director@ncsu.edu, 919-515-8754, or fill out this confidential form online.</p>\n          <p>If you consent to complete this survey, please click the \"Yes I consent\" button to continue.</p>\n          </div>\n          <Button onClick={() => this.signConsent()}>Yes, I consent</Button>\n        </Modal>\n        {/* <header>\n          Header Text\n        </header> */}\n        <Container className=\"App-body\">\n          <Row>\n            { this.state.toolOn &&\n              <Col className=\"cb-col\">\n                <Codebook />\n              </Col>\n            }\n            <Col>\n              <Questions\n                onRating={this.onRating}\n                toolOn={this.state.toolOn}\n                qCount={this.state.qCount}\n              />\n            </Col>\n          </Row>\n        </Container>\n        <Modal\n          isOpen={questionsComplete && !surveysComplete}\n          onRequestClose={this.toggleModal}\n          contentLabel=\"Surveys\"\n          shouldCloseOnOverlayClick={false}\n        >\n          <Surveys />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}